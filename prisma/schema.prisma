// Prisma schema for an e-book site with Users, Books, Posts, SwapRequests, and Messages

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL")
}

model User {
  id                    String        @id @unique @default(cuid())
  name                  String
  surname               String
  email                 String        @unique
  password              String
  username              String        @unique
  gender                String
  phone                 String        @unique
  address               String?
  avatar                String?
  is_validated          Boolean       @default(false)
  posts                 Posts[]
  messagesSent          Message[]     @relation("MessagesSent")
  messagesReceived      Message[]     @relation("MessagesReceived")
  swapRequestsRequester SwapRequest[] @relation("Requester")
  books                 Book[]
  readBooks             ReadBook[]
  wishList              WishList[]
  following             Follow[]      @relation("FollowingRelation")
  followers             Follow[]      @relation("FollowerRelation")
  Appointment           Appointment[]
}

model Posts {
  id        String   @id @unique @default(cuid())
  title     String
  content   String
  image     String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model ReadBook {
  id        String   @id @unique @default(cuid())
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId], name: "userId_bookId")
}

model WishList {
  id        String   @id @unique @default(cuid())
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId], name: "userId_bookId")
}

model Book {
  id           String        @id @unique @default(cuid())
  title        String
  author       String
  genre        String
  description  String?
  image        String?
  swapRequests SwapRequest[]
  users        User[]
  readBooks    ReadBook[]
  wishLists    WishList[]
  LibraryBook  LibraryBook[]
}

model SwapRequest {
  id            String   @id @unique @default(cuid())
  requesterId   String
  offeredBookId String
  content       String?
  status        String
  createdAt     DateTime @default(now())
  requester     User     @relation("Requester", fields: [requesterId], references: [id])
  offeredBook   Book     @relation(fields: [offeredBookId], references: [id])
}

model Message {
  id         String   @id @unique @default(cuid())
  senderId   String
  receiverId String
  text       String
  image      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  seen       Boolean
  sender     User     @relation("MessagesSent", fields: [senderId], references: [id])
  receiver   User     @relation("MessagesReceived", fields: [receiverId], references: [id])
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  follower  User @relation("FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("FollowingRelation", fields: [followingId], references: [id], onDelete: Cascade)
}

model LibraryBook {
  id        String @id @default(cuid())
  libraryId String
  bookId    String
  quantity  Int

  library     Library       @relation(fields: [libraryId], references: [id])
  book        Book          @relation(fields: [bookId], references: [id])
  Appointment Appointment[]

  @@unique([libraryId, bookId])
}

model Appointment {
  id            String   @id @default(cuid())
  userId        String
  libraryBookId String
  startTime     DateTime
  endTime       DateTime
  status        String
  createdAt     DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id])
  libraryBook LibraryBook @relation(fields: [libraryBookId], references: [id])
  cancelledAt DateTime?
}

model Library {
  id        String        @id @default(cuid())
  name      String
  address   String
  latitude  Float
  longitude Float
  books     LibraryBook[]
}
