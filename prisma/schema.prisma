// Prisma schema for an e-book site with Users, Books, Posts, SwapRequests, and Messages

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String        @id @unique @default(cuid())
  name                  String
  surname               String
  email                 String        @unique
  password              String
  username              String        @unique
  gender                String
  phone                 String        @unique
  address               String?
  avatar                String? // Kullanıcının profil fotoğrafı (isteğe bağlı)
  is_validated          Boolean       @default(false)
  posts                 UserPosts[]
  messagesSent          Message[]     @relation("MessagesSent")
  messagesReceived      Message[]     @relation("MessagesReceived")
  swapRequestsRequester SwapRequest[] @relation("Requester")
  books                 Book[]
  readBooks             ReadBook[] // Kullanıcının okuduğu kitaplar
  wishList              WishList[] // Kullanıcının istek listesi
}

model UserPosts {
  id        String   @id @unique @default(cuid())
  title     String
  content   String
  image     String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model ReadBook {
  id        String   @id @unique @default(cuid())
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
}

model WishList {
  id        String   @id @unique @default(cuid())
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
}

model Book {
  id           String        @id @unique @default(cuid())
  title        String
  author       String
  genre        String
  description  String
  image        String? // Kitap resmi için opsiyonel bir alan
  swapRequests SwapRequest[] // Kitap takas talepleriyle ilişkili
  users        User[] // Birden fazla kullanıcı tarafından eklenebilir
  readBooks    ReadBook[] // Okuma listesi ile ilişki
  wishLists    WishList[] // İstek listesi ile ilişki
}

model SwapRequest {
  id            String   @id @unique @default(cuid())
  requesterId   String
  offeredBookId String
  content       String?
  status        String // Can be 'pending', 'accepted', 'rejected'
  createdAt     DateTime @default(now())
  requester     User     @relation("Requester", fields: [requesterId], references: [id])
  offeredBook   Book     @relation(fields: [offeredBookId], references: [id])
}

model Message {
  id         String   @id @unique @default(cuid())
  senderId   String
  receiverId String
  text       String
  image      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  seen       Boolean
  sender     User     @relation("MessagesSent", fields: [senderId], references: [id])
  receiver   User     @relation("MessagesReceived", fields: [receiverId], references: [id])
}
